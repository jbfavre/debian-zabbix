--- a/frontends/php/include/classes/core/CConfigFile.php
+++ b/frontends/php/include/classes/core/CConfigFile.php
@@ -24,7 +24,7 @@ class CConfigFile {
 	const CONFIG_NOT_FOUND = 1;
 	const CONFIG_ERROR = 2;
 
-	const CONFIG_FILE_PATH = '/conf/zabbix.conf.php';
+	const CONFIG_FILE_PATH = '/etc/zabbix/zabbix.conf.php';
 
 	public $configFile = null;
 	public $config = [];
--- a/frontends/php/include/classes/core/ZBase.php
+++ b/frontends/php/include/classes/core/ZBase.php
@@ -319,7 +319,8 @@ class ZBase {
 	 * Load zabbix config file.
 	 */
 	protected function loadConfigFile() {
-		$configFile = $this->getRootDir().CConfigFile::CONFIG_FILE_PATH;
+		#$configFile = $this->getRootDir().CConfigFile::CONFIG_FILE_PATH;
+		$configFile = CConfigFile::CONFIG_FILE_PATH;
 		$config = new CConfigFile($configFile);
 		$this->config = $config->load();
 	}
--- a/frontends/php/include/classes/setup/CSetupWizard.php
+++ b/frontends/php/include/classes/setup/CSetupWizard.php
@@ -347,8 +347,9 @@ class CSetupWizard extends CForm {
 	function stage5() {
 		$this->setConfig('ZBX_CONFIG_FILE_CORRECT', true);
 
-		$config_file_name = Z::getInstance()->getRootDir().CConfigFile::CONFIG_FILE_PATH;
-		$config = new CConfigFile($config_file_name);
+		#$config_file_name = Z::getInstance()->getRootDir().CConfigFile::CONFIG_FILE_PATH;
+		#$config = new CConfigFile($config_file_name);
+		$config = CConfigFile::CONFIG_FILE_PATH;
 		$config->config = [
 			'DB' => [
 				'TYPE' => $this->getConfig('DB_TYPE'),
@@ -517,7 +518,8 @@ class CSetupWizard extends CForm {
 				// make zabbix.conf.php downloadable
 				header('Content-Type: application/x-httpd-php');
 				header('Content-Disposition: attachment; filename="'.basename(CConfigFile::CONFIG_FILE_PATH).'"');
-				$config = new CConfigFile(Z::getInstance()->getRootDir().CConfigFile::CONFIG_FILE_PATH);
+				#$config = new CConfigFile(Z::getInstance()->getRootDir().CConfigFile::CONFIG_FILE_PATH);
+				$config = new CConfigFile(CConfigFile::CONFIG_FILE_PATH);
 				$config->config = [
 					'DB' => [
 						'TYPE' => $this->getConfig('DB_TYPE'),
