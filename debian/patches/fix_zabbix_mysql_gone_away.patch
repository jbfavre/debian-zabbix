Description: Fix Zabbix errors [Z3005] query failed: [2006] MySQL server has gone away
 1. Added CLIENT_INTERACTIVE flag to mysql_real_connect - using interactive_timeout, default is 28800.
 2. Added DBPing() function - just "select 1;" to reset timeout and prevent loosing connection to db.
    2.1 Added to query and select functions timer var
    2.2 if current time - timer var > 190 => select 1 in DBPing()
 3. Added DBPing() to many _loop functions, every 200 sec
 4. Rewrited zbx_tcp_accept and added zbx_tcp_accept_timeout with timeout 200 for main_trapper_loop
 5. added check to not start nodewatcher if NodeID = 0 in config
Author: zlofenix
Origin: other, https://www.zabbix.com/forum/showthread.php?t=28644
Reviewed-by: Jean Baptiste Favre <jean-baptiste.favre@blablacar.com>
Last-Update: 2013-11-21
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/include/comms.h
+++ b/include/comms.h
@@ -108,6 +108,7 @@ int	get_address_family(const char *addr,
 int	zbx_tcp_listen(zbx_sock_t *s, const char *listen_ip, unsigned short listen_port);
 
 int	zbx_tcp_accept(zbx_sock_t *s);
+int	zbx_tcp_accept_timeout(zbx_sock_t *s, int with_timeout);
 void	zbx_tcp_unaccept(zbx_sock_t *s);
 
 void    zbx_tcp_free(zbx_sock_t *s);
--- a/include/db.h
+++ b/include/db.h
@@ -426,6 +426,7 @@ const char	*__DBnode(const char *field_n
 #define DBis_node_local_id(id)			DBis_node_id(id, CONFIG_NODEID)
 int	DBis_node_id(zbx_uint64_t id, int nodeid);
 
+void	DBPing();
 int	DBconnect(int flag);
 void	DBinit();
 
--- a/include/zbxdb.h
+++ b/include/zbxdb.h
@@ -150,6 +150,7 @@
 #	define ZBX_SQL_MOD(x, y) "mod(" #x "," #y ")"
 #endif
 
+void	zbx_db_ping();
 #ifdef HAVE_MULTIROW_INSERT
 #	define ZBX_ROW_DL	","
 #else
--- a/src/libs/zbxcomms/comms.c
+++ b/src/libs/zbxcomms/comms.c
@@ -818,11 +818,17 @@ out:
  ******************************************************************************/
 int	zbx_tcp_accept(zbx_sock_t *s)
 {
+	return zbx_tcp_accept_timeout(s,0);
+}
+
+int	zbx_tcp_accept_timeout(zbx_sock_t *s, int with_timeout)
+{
 	ZBX_SOCKADDR	serv_addr;
 	fd_set		sock_set;
 	ZBX_SOCKET	accepted_socket;
 	ZBX_SOCKLEN_T	nlen;
 	int		i, n = 0;
+	int sret;
 
 	zbx_tcp_unaccept(s);
 
@@ -837,7 +843,19 @@ int	zbx_tcp_accept(zbx_sock_t *s)
 #endif
 	}
 
-	if (ZBX_TCP_ERROR == select(n + 1, &sock_set, NULL, NULL, NULL))
+	if (with_timeout == 1)
+	{
+		struct timeval tv;
+		tv.tv_sec = 200;
+		tv.tv_usec = 0;
+		sret = select(n + 1, &sock_set, NULL, NULL, &tv);
+		if (sret == 0)
+			return -1000;
+	}
+	else
+		sret = select(n + 1, &sock_set, NULL, NULL, NULL);
+
+	if (ZBX_TCP_ERROR == sret)
 	{
 		zbx_set_tcp_strerror("select() failed: %s", strerror_from_system(zbx_sock_last_error()));
 		return FAIL;
--- a/src/libs/zbxdb/db.c
+++ b/src/libs/zbxdb/db.c
@@ -32,6 +32,7 @@ static int	txn_init = 0;	/* connecting t
 static zbx_ibm_db2_handle_t	ibm_db2;
 #elif defined(HAVE_MYSQL)
 static MYSQL			*conn = NULL;
+static double			last_db_ping = 0;
 #elif defined(HAVE_ORACLE)
 static zbx_oracle_db_handle_t	oracle;
 #elif defined(HAVE_POSTGRESQL)
@@ -182,7 +183,7 @@ int	zbx_db_connect(char *host, char *use
 #elif defined(HAVE_MYSQL)
 	conn = mysql_init(NULL);
 
-	if (!mysql_real_connect(conn, host, user, password, dbname, port, dbsocket, CLIENT_MULTI_STATEMENTS))
+	if (!mysql_real_connect(conn, host, user, password, dbname, port, dbsocket, CLIENT_MULTI_STATEMENTS | CLIENT_INTERACTIVE))
 	{
 		zabbix_errlog(ERR_Z3001, dbname, mysql_errno(conn), mysql_error(conn));
 		ret = ZBX_DB_FAIL;
@@ -200,6 +201,7 @@ int	zbx_db_connect(char *host, char *use
 	if (ZBX_DB_OK == ret)
 	{
 		DBexecute("set names utf8");
+		last_db_ping = zbx_time();
 	}
 
 	if (ZBX_DB_FAIL == ret)
@@ -518,6 +520,15 @@ static DB_RESULT	__zbx_zbx_db_select(con
 	return result;
 }
 
+void	zbx_db_ping()
+{
+#if defined(HAVE_MYSQL)
+	if (NULL != conn)
+		if (zbx_time() - last_db_ping > 190)
+			zbx_db_select("SELECT 1;");
+#endif	/* HAVE_MYSQL */
+}
+
 /******************************************************************************
  *                                                                            *
  * Function: zbx_db_begin                                                     *
@@ -941,6 +952,7 @@ int	zbx_db_vexecute(const char *fmt, va_
 		}
 		else
 		{
+			last_db_ping = zbx_time();
 			do
 			{
 				if (0 != mysql_field_count(conn))
@@ -1179,7 +1191,10 @@ error:
 			}
 		}
 		else
+		{
 			result = mysql_store_result(conn);
+			last_db_ping = zbx_time();
+		}
 	}
 #elif defined(HAVE_ORACLE)
 	result = zbx_malloc(NULL, sizeof(ZBX_OCI_DB_RESULT));
--- a/src/libs/zbxdbhigh/db.c
+++ b/src/libs/zbxdbhigh/db.c
@@ -103,6 +103,11 @@ int	DBis_node_id(zbx_uint64_t id, int no
 	return min <= id && id <= max ? SUCCEED : FAIL;
 }
 
+void	DBPing()
+{
+	zbx_db_ping();
+}
+
 void	DBclose()
 {
 	zbx_db_close();
--- a/src/zabbix_server/dbsyncer/dbsyncer.c
+++ b/src/zabbix_server/dbsyncer/dbsyncer.c
@@ -127,6 +127,15 @@ void	main_dbsyncer_loop(void)
 		}
 
 		zbx_sleep_loop(sleeptime);
+		sec = sleeptime;
+		DBPing();
+		while (sec > 200)
+		{
+			zbx_sleep_loop(200);
+			sec -= 200;
+			DBPing();
+		}
+		zbx_sleep_loop(sec);
 	}
 
 #undef STAT_INTERVAL
--- a/src/zabbix_server/pinger/pinger.c
+++ b/src/zabbix_server/pinger/pinger.c
@@ -563,6 +563,14 @@ void	main_pinger_loop(void)
 		zbx_setproctitle("%s #%d [got %d values in " ZBX_FS_DBL " sec, idle %d sec]",
 				get_process_type_string(process_type), process_num, itc, sec, sleeptime);
 
-		zbx_sleep_loop(sleeptime);
+		sec = sleeptime;
+		DBPing();
+		while (sec > 200)
+		{
+			zbx_sleep_loop(200);
+			sec -= 200;
+			DBPing();
+		}
+		zbx_sleep_loop(sec);
 	}
 }
--- a/src/zabbix_server/poller/poller.c
+++ b/src/zabbix_server/poller/poller.c
@@ -825,7 +825,15 @@ void	main_poller_loop(unsigned char poll
 			last_stat_time = time(NULL);
 		}
 
-		zbx_sleep_loop(sleeptime);
+		sec = sleeptime;
+		DBPing();
+		while (sec > 200)
+		{
+			zbx_sleep_loop(200);
+			sec -= 200;
+			DBPing();
+		}
+		zbx_sleep_loop(sec);
 	}
 
 #undef STAT_INTERVAL
--- a/src/zabbix_server/proxypoller/proxypoller.c
+++ b/src/zabbix_server/proxypoller/proxypoller.c
@@ -385,7 +385,15 @@ void	main_proxypoller_loop(void)
 			last_stat_time = time(NULL);
 		}
 
-		zbx_sleep_loop(sleeptime);
+		sec = sleeptime;
+		DBPing();
+		while (sec > 200)
+		{
+			zbx_sleep_loop(200);
+			sec -= 200;
+			DBPing();
+		}
+		zbx_sleep_loop(sec);
 	}
 #undef STAT_INTERVAL
 }
--- a/src/zabbix_server/server.c
+++ b/src/zabbix_server/server.c
@@ -796,9 +796,13 @@ int	MAIN_ZABBIX_ENTRY()
 	}
 	else if (server_num <= (server_count += CONFIG_NODEWATCHER_FORKS))
 	{
-		INIT_SERVER(ZBX_PROCESS_TYPE_NODEWATCHER, CONFIG_NODEWATCHER_FORKS);
-
-		main_nodewatcher_loop();
+		if (0 != CONFIG_MASTER_NODEID)
+		{
+			INIT_SERVER(ZBX_PROCESS_TYPE_NODEWATCHER, CONFIG_NODEWATCHER_FORKS);
+			main_nodewatcher_loop();
+		}
+		else
+			zabbix_log(LOG_LEVEL_INFORMATION, "server #%d skipped [%s #%d]", server_num, get_process_type_string(ZBX_PROCESS_TYPE_NODEWATCHER), CONFIG_NODEWATCHER_FORKS);
 	}
 	else if (server_num <= (server_count += CONFIG_HTTPPOLLER_FORKS))
 	{
--- a/src/zabbix_server/snmptrapper/snmptrapper.c
+++ b/src/zabbix_server/snmptrapper/snmptrapper.c
@@ -488,6 +488,7 @@ void	main_snmptrapper_loop(void)
 		zbx_setproctitle("%s [processed data in " ZBX_FS_DBL " sec, idle 1 sec]",
 				get_process_type_string(process_type), sec);
 
+		DBPing();
 		zbx_sleep_loop(1);
 	}
 
--- a/src/zabbix_server/trapper/trapper.c
+++ b/src/zabbix_server/trapper/trapper.c
@@ -672,6 +672,7 @@ static void	process_trapper_child(zbx_so
 void	main_trapper_loop(zbx_sock_t *s)
 {
 	double		sec = 0.0;
+	int		ret;
 
 	zbx_setproctitle("%s #%d [connecting to the database]", get_process_type_string(process_type), process_num);
 
@@ -684,7 +685,9 @@ void	main_trapper_loop(zbx_sock_t *s)
 
 		update_selfmon_counter(ZBX_PROCESS_STATE_IDLE);
 
-		if (SUCCEED == zbx_tcp_accept(s))
+		ret = zbx_tcp_accept_timeout(s, 1);
+
+		if (SUCCEED == ret)
 		{
 			update_selfmon_counter(ZBX_PROCESS_STATE_BUSY);
 
@@ -698,6 +701,8 @@ void	main_trapper_loop(zbx_sock_t *s)
 			zbx_tcp_unaccept(s);
 		}
 		else
-			zabbix_log(LOG_LEVEL_WARNING, "Trapper failed to accept connection");
+			if (ret != -1000)
+				zabbix_log(LOG_LEVEL_WARNING, "Trapper failed to accept connection");
+		DBPing();
 	}
 }
